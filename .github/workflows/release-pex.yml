name: release-pex

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  pex:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14, windows-2022]
        py: ["3.11"]
    runs-on: ${{ matrix.os }}
    env:
      PEX_VERBOSE: "9"
      PEX_PIP_VERSION: "latest"
      PEX_VENV: "1"
      PEX_IGNORE_RCFILES: "1"
      PYTHONIOENCODING: "UTF-8"
      PIP_NO_INPUT: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build pex

      - name: Build wheel
        run: |
          python -m build --wheel
          ls -l dist

      - name: Build PEX
        shell: bash
        run: |
          case "${{ matrix.os }}" in
            macos-13) OS_OUT="k2p-macos-x86_64.pex" ;;
            macos-14) OS_OUT="k2p-macos-arm64.pex" ;;
            ubuntu-22.04) OS_OUT="k2p-linux.pex" ;;
            windows-2022) OS_OUT="k2p-windows.pex" ;;
          esac

          pex dist/*.whl \
            -c k2p \
            -o "dist/${OS_OUT}" \
            --venv prepend \
            --strip-pex-env \
            --validate-entry-point \
            --interpreter-constraint 'CPython==3.11.*'

          echo "Produced dist/${OS_OUT}"
          ls -l dist

      # Unix smoke test: --help + interpreter-mode import for version
      - name: Smoke test PEX (Unix)
        if: matrix.os != 'windows-2022'
        shell: bash
        run: |
          set -euo pipefail
          for f in dist/*.pex; do
            echo "Testing $f"
            python3 "$f" --help >/dev/null
            ver="$(PEX_INTERPRETER=1 python3 "$f" -c "import knime2py, sys; print(getattr(knime2py, '__version__', 'unknown'))")"
            echo "knime2py version: $ver"
            test -n "$ver"
          done

      # Windows smoke test: --help + interpreter-mode import for version
      - name: Smoke test PEX (Windows)
        if: matrix.os == 'windows-2022'
        shell: pwsh
        run: |
          Get-ChildItem dist\*.pex | ForEach-Object {
            Write-Host "Testing $($_.FullName)"
            python $_.FullName --help | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "k2p --help failed: $LASTEXITCODE" }

            $env:PEX_INTERPRETER = "1"
            $ver = python $_.FullName -c "import knime2py, sys; print(getattr(knime2py,'__version__','unknown'))"
            if ($LASTEXITCODE -ne 0) { throw "interpreter-mode import failed: $LASTEXITCODE" }
            if ([string]::IsNullOrWhiteSpace($ver)) { throw 'empty version output' }
            Write-Host ("knime2py version: {0}" -f $ver)
            Remove-Item Env:\PEX_INTERPRETER -ErrorAction SilentlyContinue
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pex-${{ matrix.os }}
          path: dist/*.pex
          if-no-files-found: error

  release:
    needs: pex
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compute tag
        id: tag
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "TAG=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
            echo "PRERELEASE=false" >> "$GITHUB_OUTPUT"
          else
            echo "TAG=nightly-$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"
            echo "PRERELEASE=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.TAG }}
          prerelease: ${{ steps.tag.outputs.PRERELEASE }}
          files: artifacts/**/*
