# Auto-generated test for KNIME workflow "ISU_Master_test"
# Generated by test_gen.cli â€” do not hand-edit; re-generate from the source workflow.

"""
Test the roundtrip conversion of the KNIME workflow "ISU_Master_test" to Python.

Overview
----------------------------
This module tests the conversion of a KNIME workflow into a Python workbook and verifies
the output CSV files generated by the workbook against expected results.

Runtime Behavior
----------------------------
Inputs:
- The module reads the KNIME workflow file and the expected output CSV files from a specified
  directory.

Outputs:
- The generated Python workbook is executed, and the resulting CSV files are compared to the
  expected outputs. The results are written to the context as assertions.

Key algorithms or mappings:
- The module utilizes subprocess to run the generated Python workbook and compares CSV files
  using a custom comparison function.

Edge Cases
----------------------------
The code checks for the existence of the workflow and expected output directories, ensuring
that appropriate assertions are made if files are missing. It also handles cases where no
output CSV files are produced.

Generated Code Dependencies
----------------------------
The generated code requires the following external libraries: pandas, numpy, and support
for CSV comparison. These dependencies are required by the generated code, not by this
test module.

Usage
----------------------------
This module is typically invoked by a test runner, and it expects a directory for output
files to be provided by a fixture. An example of context access might look like:
```
output_dir = Path("path/to/output")
```

Node Identity
----------------------------
The module does not generate code based on `settings.xml`, so there are no KNIME factory
IDs or special flags to report.

Configuration
----------------------------
There are no specific configurations or dataclasses used in this module.

Limitations / Not implemented
----------------------------
This module does not cover all possible edge cases in the KNIME workflow conversion process
and may not handle all types of workflows.

References
----------------------------
For more information, refer to the KNIME documentation and the HUB_URL constant.
"""

import os
import subprocess
import sys
from pathlib import Path

from support import csv_compare 

# RTOL for models results comparison. 10% is good enough.
RTOL = 0.1

def test_roundtrip_isu_master_test(output_dir: Path):
    """
    Test the roundtrip conversion of the KNIME workflow "ISU_Master_test" to Python.

    This function verifies that the KNIME workflow can be successfully converted to a Python
    workbook and that the output CSV files generated by the workbook match the expected output.

    Args:
        output_dir (Path): The directory where the generated Python workbook and output CSVs will be stored.
    """
    repo_root = Path(__file__).resolve().parents[1]
    knime_proj = repo_root / "tests" / "data" / "ISU_Master_test"
    out_dir = output_dir  # provided by conftest.py fixture
    expected_dir = repo_root / "tests" / "data" / "data" / "ISU_Master_test"

    # Preconditions
    assert (knime_proj / "workflow.knime").exists(), f"Missing workflow.knime in {knime_proj}"
    assert expected_dir.exists(), f"Expected directory missing: {expected_dir}"

    expected_csvs = sorted(expected_dir.glob("*output.csv"))
    assert expected_csvs, f"No expected '*output.csv' files found in {expected_dir}. Contents: {[p.name for p in expected_dir.iterdir()]}"

    # 1) Generate Python workbook(s) only, no graphs
    cmd = [
        sys.executable, "-m", "knime2py",
        str(knime_proj),
        "--out", str(out_dir),
        "--graph", "off",
        "--workbook", "py",
    ]
    env = os.environ.copy()
    env["PYTHONPATH"] = str(repo_root / "src") + (os.pathsep + env["PYTHONPATH"] if env.get("PYTHONPATH") else "")
    gen = subprocess.run(cmd, capture_output=True, text=True, cwd=str(repo_root), env=env)
    assert gen.returncode == 0, f"CLI failed\nSTDOUT:\n{gen.stdout}\nSTDERR:\n{gen.stderr}"

    # 2) Locate a generated workbook script
    candidates = sorted(out_dir.glob("*_workbook.py"))
    assert candidates, f"No *_workbook.py generated in {out_dir}. Contents: {[p.name for p in out_dir.iterdir()]}"
    script = candidates[0]

    # 3) Run the generated workbook (cwd=out_dir so relative paths like ../!output/*.csv resolve correctly)
    run = subprocess.run([sys.executable, str(script)], cwd=str(out_dir), capture_output=True, text=True, env=env)
    assert run.returncode == 0, f"Workbook execution failed\nSTDOUT:\n{run.stdout}\nSTDERR:\n{run.stderr}"

    # 4) Compare each expected '*output.csv' with produced file of the same name
    produced_names = {p.name for p in out_dir.glob("*.csv")}
    assert produced_names, f"No produced CSVs in {out_dir}. Contents: {[p.name for p in out_dir.iterdir()]}"

    for exp in expected_csvs:
        produced = out_dir / exp.name
        assert produced.exists(), (
            f"Produced CSV not found for expected '{exp.name}'. "
            f"Produced CSVs: {sorted(produced_names)}"
        )
        csv_compare.compare_csv(produced, exp, rtol=RTOL)
