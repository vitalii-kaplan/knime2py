# Auto-generated test for KNIME workflow "ISU_Master_test_preparation"
# Generated by test_gen.cli â€” do not hand-edit; re-generate from the source workflow.

import os
import subprocess
import sys
from pathlib import Path

from support import csv_compare  # provides compare_csv(...) and RTOL

# Resolve RTOL: env K2P_RTOL overrides the library default
_env_rtol = os.environ.get("K2P_RTOL")
RTOL = float(_env_rtol) if _env_rtol is not None else csv_compare.RTOL

def test_roundtrip_isu_master_test_preparation(output_dir: Path):
    repo_root = Path(__file__).resolve().parents[1]
    knime_proj = repo_root / "tests" / "data" / "ISU_Master_test_preparation"
    out_dir = output_dir  # provided by conftest.py fixture
    expected_csv = repo_root / "tests" / "data" / "data" / "ISU_Master_test_preparation" / "output.csv"

    # Preconditions
    assert (knime_proj / "workflow.knime").exists(), f"Missing workflow.knime in {knime_proj}"
    assert expected_csv.exists(), f"Expected reference CSV missing: {expected_csv}"

    # 1) Generate Python workbook(s) only, no graphs
    cmd = [
        sys.executable, "-m", "knime2py",
        str(knime_proj),
        "--out", str(out_dir),
        "--graph", "off",
        "--workbook", "py",
    ]
    env = os.environ.copy()
    env["PYTHONPATH"] = str(repo_root / "src") + (os.pathsep + env["PYTHONPATH"] if env.get("PYTHONPATH") else "")
    gen = subprocess.run(cmd, capture_output=True, text=True, cwd=str(repo_root), env=env)
    assert gen.returncode == 0, f"CLI failed\nSTDOUT:\n{gen.stdout}\nSTDERR:\n{gen.stderr}"

    # 2) Locate a generated workbook script
    candidates = sorted(out_dir.glob("*_workbook.py"))
    assert candidates, f"No *_workbook.py generated in {out_dir}. Contents: {[p.name for p in out_dir.iterdir()]}"
    script = candidates[0]

    # 3) Run the generated workbook (cwd=out_dir so relative paths like ../!output/output.csv resolve correctly)
    run = subprocess.run([sys.executable, str(script)], cwd=str(out_dir), capture_output=True, text=True, env=env)
    assert run.returncode == 0, f"Workbook execution failed\nSTDOUT:\n{run.stdout}\nSTDERR:\n{run.stderr}"

    # 4) Compare the produced CSV to the expected CSV (with RELATIVE tolerance)
    produced_csv = out_dir / "output.csv"
    assert produced_csv.exists(), f"Produced output.csv not found in {out_dir}. Contents: {[p.name for p in out_dir.iterdir()]}"

    csv_compare.compare_csv(produced_csv, expected_csv, rtol=RTOL)
